plot(qc <- qchisq((1:nrow(x) - 1/2) / nrow(x), df = 6),
+ sd <- sort(d),
+ xlab = expression(paste(chi[6]^2, " Quantile")),
+ ylab = "Ordered distances", xlim = range(qc) * c(1, 1.1))
plot(qc <- qchisq((1:nrow(x) - 1/2) / nrow(x), df = 6),
+ sd <- sort(d),
+ ylab = "Ordered distances", xlim = range(qc) * c(1, 1.1))
plot(qc <- qchisq((1:nrow(x) - 1/2) / nrow(x), df = 6),
sd <- sort(d),
ylab = "Ordered distances",
xlim = range(qc) * c(1, 1.1))
plot(qc <- qchisq((1:nrow(x) - 1/2) / nrow(x), df = 6),
sd <- sort(d),
ylab = "Ordered distances",
xlim = range(qc) * c(1, 1.1))
R> oups <- which(rank(abs(qc - sd), ties = "random") > nrow(x) - 3)
oups <- which(rank(abs(qc - sd), ties = "random") > nrow(x) - 3)
text(qc[oups], sd[oups] - 1.5, names(oups))
abline(a = 0, b = 1)
hypo
x <- hypo[,2:7]
cov(x)
x <- hypo[,c('age','IQ','weight')]
cov(x)
cor(x)
x <- hypo[,c('age','IQ','weight')]
x
summary(x)
cor(x)
x <- hypo[!is.na(hypo$age) & !is.na(hypo$IQ),c('age','IQ','weight')]
x
cov(x)
cor(x)
cm <- colMeans(hypo[!is.na(hypo$age) & !is.na(hypo$IQ),c('age','IQ','weight')])
cm
x <- hypo[!is.na(hypo$age) & !is.na(hypo$IQ),c('age','IQ','weight')]
cm <- colMeans(x[!is.na(x$age) & !is.na(x$IQ),])
cm
x[is.na(x$age),'age'] <- cm[,'age']
cm[,'age']
x[is.na(x$age),'age'] <- cm['age']
x
x <- hypo[!is.na(hypo$age) & !is.na(hypo$IQ),c('age','IQ','weight')]
x
x <- hypo[,c('age','IQ','weight')]
cm <- colMeans(x[!is.na(x$age) & !is.na(x$IQ),])
cm
x[is.na(x$age),'age'] <- cm['age']
x
x[is.na(x$IQ), 'IQ'] <- cm['IQ']
x
cov(x)
cor(x)
poverty
poverty
dim(pottery)
head(pottery)
data <- pottery[,1:9]
layout(matrix(1:9, nc = 3))
sapply(colnames(data), function(x) {
qqnorm(USairpollution[[x]], main = x)
qqline(USairpollution[[x]])
})
is.na(pottery)
sum(is.na(pottery))
data
head(data)
summary(data)
data <- pottery[,1:9]
layout(matrix(1:9, nc = 3))
data <- pottery[,1:9]
layout(matrix(1:9, nc = 3))
sapply(colnames(data), function(x) {
qqnorm(data[[x]], main = x)
qqline(data[[x]])
})
x <- pottery[,1:9]
cm <- colMeans(x)
S <- cov(x)
d <- apply(x, 1, function(x) t(x - cm) %*% solve(S) %*% (x - cm))
plot(qc <- qchisq((1:nrow(x) - 1/2) / nrow(x), df = 6),
sd <- sort(d),
ylab = "Ordered distances",
xlim = range(qc) * c(1, 1.1))
oups <- which(rank(abs(qc - sd), ties = "random") > nrow(x) - 3)
text(qc[oups], sd[oups] - 1.5, names(oups))
abline(a = 0, b = 1)
par(mfrow=c(1,1))
cm <- colMeans(x)
S <- cov(x)
d <- apply(x, 1, function(x) t(x - cm) %*% solve(S) %*% (x - cm))
plot(qc <- qchisq((1:nrow(x) - 1/2) / nrow(x), df = 6),
sd <- sort(d),
ylab = "Ordered distances",
xlim = range(qc) * c(1, 1.1))
oups <- which(rank(abs(qc - sd), ties = "random") > nrow(x) - 3)
text(qc[oups], sd[oups] - 1.5, names(oups))
abline(a = 0, b = 1)
par(mfrow=c(1,1))
cm <- colMeans(x)
S <- cov(x)
d <- apply(x, 1, function(x) t(x - cm) %*% solve(S) %*% (x - cm))
plot(qc <- qchisq((1:nrow(x) - 1/2) / nrow(x), df = 6),
sd <- sort(d),
ylab = "Ordered distances",
xlim = range(qc) * c(1, 1.1))
oups <- which(rank(abs(qc - sd), ties = "random") > nrow(x) - 3)
text(qc[oups], sd[oups], names(oups))
abline(a = 0, b = 1)
par(mfrow=c(1,1))
cm <- colMeans(x)
S <- cov(x)
d <- apply(x, 1, function(x) t(x - cm) %*% solve(S) %*% (x - cm))
plot(qc <- qchisq((1:nrow(x) - 1/2) / nrow(x), df = 6),
sd <- sort(d),
ylab = "Ordered distances",
xlim = range(qc) * c(1, 1.1))
oups <- which(rank(abs(qc - sd), ties = "random") > nrow(x) - 3)
text(qc[oups], sd[oups]-0.5, names(oups))
abline(a = 0, b = 1)
ls()
x05
dat
ls()
xx
S <- matrix(c(3.8778,2.8110,3.1480,3.5062,
2.8110,2.1210,2.2669,2.5690,
3.1480,2.2669,2.6550,2.8341,
3.5062,2.5690,2.8341,3.2352),
nrow=4)
S
diag(S)
1/diag(S)
D <- sqrt(1/diag(S))
R <- D^(-1/2)
R
sqrt(1/D)
sqrt(1/diag(S))
R
R <- D^(-1/2) %*% S %*% D^(-1/2)
R
R <- t(D^(-1/2)) %*% S %*% D^(-1/2)
R
D <- diag(S)
D
D^(-1/2)
sqrt(1/3.8778)
D
I
I()
I(4)
I(4,4)
diag(D^(-1/2))
D <- diag(S)
R <- diag(D^(-1/2)) %*% S %*% diag(D^(-1/2))
R
choose(5,2)
distnce
distance
?matrix
M <-matrix(c(3,6,4,0,7,
4,2,7,4,6,
4,0,3,1,5,
6,2,6,1,1,
1,6,2,1,4,
5,1,2,0,2,
1,1,2,6,1,
1,1,5,4,4,
7,0,1,3,3,
3,3,0,5,1), ncol = 5, byrow=T)
M
dist(M)
?dist
dist(M, method = "euclidean")
dist(M, method = "manhattan")
id <- read.table('clipboard')
dim(id)
head(id)
join
paste(id$V1,',')
?paste
demo('MVA')
library('MVA')
demo(package='MVA')
demo('Ch-PCA')
blood_corr
blood_cov
blood_sd
diag(blood_cov)
round(sqrt(diag(blood_cov)),3)
blood_pcacov <- princomp(covmat = blood_cov)
summary(blood_pcacov, loadings = TRUE)
plot(blood_pcacov)
plot(blood_pcacov)
blood_pcacor <- princomp(covmat = blood_corr)
summary(blood_pcacor)
summary(blood_pcacor, loadings = TRUE)
plot(blood_pcacor)
?summary.princomp
blood_corr
n <- 1000
set.seed(4546576)
data <- data.frame(x1 = rnorm(n),
x2 = rnorm(n, mean=12,sd=5),
x3 = 3*rnorm(n, mean=-1,sd=3.5))
pairs(data)
derive_data <- cbind(data,
x4=10*jitter(data$x1),
x5=jitter(data$x2+0.6*data$x3),
x6=12*jitter(data$x1+data$x2),
x7=16*jitter(data$x1),
x8=7*jitter(data$x1))
cor(derive_data)
hist(derive_data$x4)
hist(derive_data$x5)
cor(derive_data)
m1 <- princomp(derive_data)
summary(m1)
plot(m1)
m2 <- princomp(covmat = cor(derive_data))
summary(m2)
plot(m2)
minMaxScale <- function(data) {
max_list <- apply(data,2,max)
min_list <- apply(data,2,min)
range_list <- max_list - min_list
scale_data <- data
for(i in 1:ncol(scale_data)) {
scale_data[,i] <- (scale_data[,i] - min_list[i])/range_list[i]
}
return(scale_data)
}
scale_data <- minMaxScale(derive_data)
m3 <- princomp(scale_data)
summary(m3)
plot(m3)
# 方法4 只计算衍生数据的主成份
only_derive_data <- scale_data[,4:8]
m4 <- princomp(only_derive_data)
plot(m4)
summary(m4)
# 方法5 只计算衍生数据，使用相关系数
m5 <- princomp(covmat = cor(derive_data[,4:8]))
plot(m5)
summary(m5)
?scale
scale_data_2 <- scale(derive_data, center=T,scale=T)
summary(scale_data_2)
plot(scale_data_2)
plot(scale_data_2$x1)
hist(scale_data_2$x1)
hist(scale_data_2$x2)
scale_data_2$x2
class(scale_data_2)
scale_data_2 <- as.data.frame(scale(derive_data, center=T,scale=T))
head(scale_data_2)
summary(scale_data_2)
hist(scale_data_2$x1)
hist(derive_data$x1)
hist(scale_data$x1)
m4 <- princomp(scale_data_2)
plot(m4)
plot(m2)
summary(m4)
summary(m2)
plot(m3)
model_zero_mean <- princomp(data_zero_mean)
data_zero_mean <- as.data.frame(scale(derive_data,
center=T,
scale=F))
model_zero_mean <- princomp(data_zero_mean)
plot(model_zero_mean)
plot(m1)
summary(model_zero_mean)
summary(m1)
data_normal <- as.data.frame(scale(derive_data,
center=T,
scale=T))
model_normal <- princomp(data_normal)
plot(model_normal)
summary(model_normal)
library('MVA')
demo('Ch-PCA')
heptathlon$hurdles <- with(heptathlon, max(hurdles)-hurdles)
heptathlon$run200m <- with(heptathlon, max(run200m)-run200m)
heptathlon$run800m <- with(heptathlon, max(run800m)-run800m)
score <- which(colnames(heptathlon) == "score")
round(cor(heptathlon[,-score]), 2)
plot(heptathlon[,-score])
heptathlon <- heptathlon[-grep("PNG", rownames(heptathlon)),]
score <- which(colnames(heptathlon) == "score")
round(cor(heptathlon[,-score]), 2)
heptathlon
demo('Ch-PCA')
# chp 3.10.2
heptathlon$hurdles <- with(heptathlon, max(hurdles)-hurdles)
heptathlon$run200m <- with(heptathlon, max(run200m)-run200m)
heptathlon$run800m <- with(heptathlon, max(run800m)-run800m)
score <- which(colnames(heptathlon) == "score")
score
,-score
,-score
round(cor(heptathlon[,-score]), 2)
plot(heptathlon[,-score])
-grep("PNG", rownames(heptathlon))
heptathlon
grep("PNG", rownames(heptathlon))
heptathlon[-grep("PNG", rownames(heptathlon)),]
rownames(heptathlon)
-grep("PNG", rownames(heptathlon))
heptathlon[-grep("PNG", rownames(heptathlon)),]
demo('Ch-PCA')
heptathlon
grep("PNG", rownames(heptathlon))
grep("KOR", rownames(heptathlon))
xlim <- range(head_pca$scores[,1])
plot(head_pca$scores, xlim = xlim, ylim = xlim)
heptathlon$hurdles <- with(heptathlon, max(hurdles)-hurdles)
heptathlon$run200m <- with(heptathlon, max(run200m)-run200m)
heptathlon$run800m <- with(heptathlon, max(run800m)-run800m)
score <- which(colnames(heptathlon) == "score")
round(cor(heptathlon[,-score]), 2)
plot(heptathlon[,-score])
data(package='MVA')
demo('Ch-PCA')
heptathlon_pca <- prcomp(heptathlon[, -score], scale = TRUE)
print(heptathlon_pca)
plot(heptathlon_pca)
summary(heptathlon_pca)
heptathlon_pca
heptathlon_pca$rotation
center <- heptathlon_pca$center
scale <- heptathlon_pca$scale
center
scale
summary(heptathlon)
hm <- as.matrix(heptathlon[,-score])
hm
scale(hm, center = center, scale = scale) %*%
+ heptathlon_pca$rotation[,1])
scale(hm, center = center, scale = scale)
heptathlon_pca$rotation[,1]
scale(hm, center = center, scale = scale) %*% heptathlon_pca$rotation[,1])
scale(hm, center = center, scale = scale)
?drop
scale(hm, center = center, scale = scale)
%*% heptathlon_pca$rotation[,1]
drop(scale(hm, center = center, scale = scale)
%*% heptathlon_pca$rotation[,1])
predict(heptathlon_pca)[,1]
predict(heptathlon_pca)[,1] # 与上面等价
predict(heptathlon_pca)[,1:2] # 与上面等价
heptathlon
cor(heptathlon$score, heptathlon_pca$x[,1])
cor(heptathlon$score, heptathlon_pca$x[,2]) # 分数与第一个的相关性
cor(heptathlon$score, heptathlon_pca$x[,3]) # 分数与第一个的相关性
cor(heptathlon$score, heptathlon_pca$x[,4]) # 分数与第一个的相关性
cor(heptathlon$score, heptathlon_pca$x[,1]) # 分数与第一个的相关性
plot(heptathlon$score, heptathlon_pca$x[,1])
cor(USairpollution[,-1])
USairpollution
cor(USairpollution[,-1])
usair_pca <- princomp(USairpollution[,-1], cor = TRUE)
data("USairpollution", package = "HSAUR2")
USairpollution
panel.hist <- function(x, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="grey", ...)
}
USairpollution$negtemp <- USairpollution$temp * (-1)
USairpollution$temp <- NULL
pairs(USairpollution[,-1], diag.panel = panel.hist,
pch = ".", cex = 1.5)
summary(usair_pca, loadings = TRUE)
# 绘制主成份
pairs(usair_pca$scores[,1:3], ylim = c(-6, 4), xlim = c(-6, 4),
panel = function(x,y, ...) {
text(x, y, abbreviate(row.names(USairpollution)),
cex = 0.6)
bvbox(cbind(x,y), add = TRUE)
})
out <- sapply(1:6, function(i) {
plot(USairpollution$SO2,usair_pca$scores[,i],
xlab = paste("PC", i, sep = ""),
ylab = "Sulphur dioxide concentration")
})
out
usair_pca$scores
usair_reg <- lm(SO2 ~ usair_pca$scores,
data = USairpollution)
summary(usair_reg)
cor(usair_pca$scores,USairpollution$SO2)
cor(usair_pca$scores[,1],USairpollution$SO2)
cor(usair_pca$scores[,2],USairpollution$SO2)
library('MVA')
demo('Ch-PCA')
usair_reg <- lm(SO2 ~ usair_pca$scores,
data = USairpollution)
summary(usair_reg)
head(USairpollution)
usair_reg2 <- lm(SO2 ~ .,
data = USairpollution)
summary(usair_reg2)
?seep
?sweep
headsize.std <- sweep(headsize, 2,
apply(headsize, 2, sd), FUN = "/")
headsize.std
apply(headsize, 2, sd)
headsize
R <- cor(headsize.std)
R
r11 <- R[1:2, 1:2]
r11
r22 <- R[-(1:2), -(1:2)]
r22
r12 <- R[1:2, -(1:2)]
r12
r21 <- R[-(1:2), 1:2]
r21
(E1 <- solve(r11) %*% r12 %*% solve(r22) %*%r21)
(E2 <- solve(r22) %*% r21 %*% solve(r11) %*%r12)
(e1 <- eigen(E1))
E1
(e2 <- eigen(E2))
girth1 <- headsize.std[,1:2] %*% e1$vectors[,1]
girth2 <- headsize.std[,3:4] %*% e2$vectors[,1]
girth1
girth2 <- headsize.std[,3:4] %*% e2$vectors[,1]
shape1 <- headsize.std[,1:2] %*% e1$vectors[,2]
shape2 <- headsize.std[,3:4] %*% e2$vectors[,2]
(g <- cor(girth1, girth2))
(s <- cor(shape1, shape2))
plot(girth1, girth2)
plot(shape1, shape2)
n <- 1000
set.seed(4546576)
data <- data.frame(x1 = rnorm(n),
x2 = rnorm(n, mean=12,sd=5),
x3 = 3*rnorm(n, mean=-1,sd=3.5))
pairs(data)
?paris
?pairs
pairs(data,pch=15)
pairs(data,pch=19)
cor(data)
cor(derive_data)
cor(data)
derive_data <- cbind(data,
x4=10*jitter(data$x1),
x5=jitter(data$x2+0.6*data$x3),
x6=12*jitter(data$x1+data$x2),
x7=16*jitter(data$x1),
x8=7*jitter(data$x1))
cor(derive_data)
m1 <- princomp(derive_data)
summary(m1)
plot(m1)
summary(model_corr)
plot(model_corr)
model_corr <- princomp(covmat = cor(derive_data))
summary(model_corr)
plot(model_corr)
center=T,
scale=F))
model_zero_mean <- princomp(data_zero_mean)
plot(model_zero_mean)
summary(model_zero_mean)
data_zero_mean <- as.data.frame(scale(derive_data,
center=T,
scale=F))
model_zero_mean <- princomp(data_zero_mean)
plot(model_zero_mean)
summary(model_zero_mean)
setwd("D:/dev/my_git/iamar/script")
library('MVA')
demo('Ch-MDS')
X
(D <- dist(X))
cmdscale(D, k = 9, eig = TRUE)
max(abs(dist(X) - dist(cmdscale(D, k = 5))))
max(abs(prcomp(X)$x) - abs(cmdscale(D, k = 5)))   # PCA与MDS的关系
X_m <- cmdscale(dist(X, method = "manhattan"), k = nrow(X) - 1, eig = TRUE)
(X_eigen <- X_m$eig)
cumsum(abs(X_eigen)) / sum(abs(X_eigen))
cumsum(X_eigen^2) / sum(X_eigen^2)
?cmdscale
(airline_mds <- cmdscale(airdist, k = 9, eig = TRUE))
airline_mds$points
airdist
dim(aridist)
dim(airdist)
ncol(airdist)
class(airdist)
(lam <- airline_mds$eig)
cumsum(abs(lam)) / sum(abs(lam))
cumsum(lam^2) / sum(lam^2)
skulls
summary(skulls)
?ttapply
?tapply
skulls_var <- tapply(1:nrow(skulls), skulls$epoch,
function(i) var(skulls[i,-1]))
skulls_var
S <- 0
for (v in skulls_var) S <- S + 29 * v
S
(S <- S / 149)
